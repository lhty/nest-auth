# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auth {
  accessToken: String!
  refreshToken: String!
  user: User
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTimeFilter
  notIn: [DateTime!]
}

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: IntFilter
  notIn: [Int!]
}

type Mutation {
  createUser(user: UserWithProfileInput!): Auth!
  deleteUser(where: UserWhereUniqueInput!): Boolean!
  login(data: UserLoginInput!): Auth!
  refreshToken(token: String!): Auth!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

"""
A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
"""
scalar PhoneNumber

type Profile {
  email: String!

  """@Validator.@IsAlpha()"""
  firstName: String!

  """@Validator.@IsAlpha()"""
  lastName: String!
  phone: String!
  role: Roles!
}

type ProfileCountAggregate {
  _all: Int!
  email: Int!
  firstName: Int!
  lastName: Int!
  phone: Int!
  role: Int!
}

input ProfileCreateOrConnectWithoutUserInput {
  create: ProfileCreateWithoutUserInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateWithoutUserInput {
  email: EmailAddress!
  firstName: String!
  lastName: String!
  phone: PhoneNumber!
}

type ProfileMaxAggregate {
  email: String
  firstName: String
  lastName: String
  phone: String
  role: Roles
}

type ProfileMinAggregate {
  email: String
  firstName: String
  lastName: String
  phone: String
  role: Roles
}

input ProfileRelationFilter {
  is: ProfileWhereInput
  isNot: ProfileWhereInput
}

input ProfileUpdateOneRequiredWithoutUserInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  create: ProfileCreateWithoutUserInput
  update: ProfileUpdateWithoutUserInput
  upsert: ProfileUpsertWithoutUserInput
}

input ProfileUpdateWithoutUserInput {
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  phone: StringFieldUpdateOperationsInput
}

input ProfileUpsertWithoutUserInput {
  create: ProfileCreateWithoutUserInput!
  update: ProfileUpdateWithoutUserInput!
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  User: UserRelationFilter
  email: StringFilter
  firstName: StringFilter
  lastName: StringFilter
  phone: StringFilter
}

input ProfileWhereUniqueInput {
  email: EmailAddress
  phone: PhoneNumber
}

type Query {
  me: User!
  user(where: UserWhereUniqueInput!): User!
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum Roles {
  ADVANCED
  INACTIVE
  PASSWORD_REQUIRED
  REGULAR
  SU
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: StringFilter
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  email: String!
  id: ID!
  profile: Profile!
  updatedAt: DateTime!
}

type UserAvgAggregate {
  id: Float
}

type UserCountAggregate {
  _all: Int!
  createdAt: Int!
  email: Int!
  id: Int!
  updatedAt: Int!
}

input UserLoginInput {
  email: String!
  password: String!
}

type UserMaxAggregate {
  createdAt: DateTime
  email: String
  id: Int
  updatedAt: DateTime
}

type UserMinAggregate {
  createdAt: DateTime
  email: String
  id: Int
  updatedAt: DateTime
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  password: SortOrder
  updatedAt: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  createdAt
  email
  id
  password
  updatedAt
}

type UserSumAggregate {
  id: Int
}

input UserUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  profile: ProfileUpdateOneRequiredWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  id: IntFilter
  password: StringFilter
  profile: ProfileRelationFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}

input UserWithProfileInput {
  email: EmailAddress!
  firstName: String!
  lastName: String!
  password: String!
  phone: PhoneNumber!
}

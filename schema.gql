# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ProfileAvgAggregate {
  id: Float
}

type ProfileCountAggregate {
  id: Int!
  email: Int!
  phone: Int!
  firstName: Int!
  lastName: Int!
  _all: Int!
}

type ProfileMaxAggregate {
  id: Int
  email: String
  phone: String
  firstName: String
  lastName: String
}

type ProfileMinAggregate {
  id: Int
  email: String
  phone: String
  firstName: String
  lastName: String
}

type ProfileSumAggregate {
  id: Int
}

type Profile {
  id: ID!
  email: String!
  phone: String

  """@Validator.@IsAlpha()"""
  firstName: String!

  """@Validator.@IsAlpha()"""
  lastName: String!
  user: User
}

type UserAvgAggregate {
  id: Float
}

type UserCountAggregate {
  id: Int!
  role: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type UserMaxAggregate {
  id: Int
  role: Roles
  createdAt: DateTime
  updatedAt: DateTime
}

enum Roles {
  PASSWORD_REQUIRED
  INACTIVE
  REGULAR
  ADVANCED
  SU
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserMinAggregate {
  id: Int
  role: Roles
  createdAt: DateTime
  updatedAt: DateTime
}

type UserSumAggregate {
  id: Int
}

type User {
  id: ID!
  role: Roles!
  profile: Profile!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Auth {
  """JWT access token"""
  accessToken: String!

  """JWT refresh token"""
  refreshToken: String!
  user: User
}

type Query {
  user(where: UserWhereUniqueInput!): User!
  me: User!
  users(where: UserWhereInput, orderBy: [UserOrderByInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): [User!]!
}

input UserWhereUniqueInput {
  id: Int
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IntFilter
  pwd: StringFilter
  profile: ProfileRelationFilter
  profileId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input ProfileRelationFilter {
  is: ProfileWhereInput
  isNot: ProfileWhereInput
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
  id: IntFilter
  email: StringFilter
  phone: StringNullableFilter
  firstName: StringFilter
  lastName: StringFilter
  user: UserRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input UserOrderByInput {
  id: SortOrder
  pwd: SortOrder
  profileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

enum SortOrder {
  asc
  desc
}

enum UserScalarFieldEnum {
  id
  pwd
  role
  profileId
  createdAt
  updatedAt
}

type Mutation {
  login(data: UserLoginInput!): Auth!
  refreshToken(token: String!): Auth!
  createUser(user: UserCreateInput!): Auth!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User!
}

input UserLoginInput {
  email: String!
  password: String!
}

input UserCreateInput {
  pwd: String!
  createdAt: DateTime
  updatedAt: DateTime
  profile: ProfileCreateNestedOneWithoutUserInput!
}

input ProfileCreateNestedOneWithoutUserInput {
  create: ProfileCreateWithoutUserInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateWithoutUserInput {
  email: EmailAddress!
  phone: PhoneNumber
  firstName: String!
  lastName: String!
}

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

"""
A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
"""
scalar PhoneNumber

input ProfileCreateOrConnectWithoutUserInput {
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutUserInput!
}

input ProfileWhereUniqueInput {
  id: Int
  email: EmailAddress
  phone: PhoneNumber
}

input UserUpdateInput {
  pwd: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  profile: ProfileUpdateOneRequiredWithoutUserInput
}

input StringFieldUpdateOperationsInput {
  set: String
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input ProfileUpdateOneRequiredWithoutUserInput {
  create: ProfileCreateWithoutUserInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  upsert: ProfileUpsertWithoutUserInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutUserInput
}

input ProfileUpsertWithoutUserInput {
  update: ProfileUpdateWithoutUserInput!
  create: ProfileCreateWithoutUserInput!
}

input ProfileUpdateWithoutUserInput {
  email: StringFieldUpdateOperationsInput
  phone: NullableStringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

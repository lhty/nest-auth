# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserAvgAggregate {
  id: Float
}

type UserCountAggregate {
  id: Int!
  email: Int!
  name: Int!
  _all: Int!
}

type UserMaxAggregate {
  id: Int
  email: String
  name: String
}

type UserMinAggregate {
  id: Int
  email: String
  name: String
}

type UserSumAggregate {
  id: Int
}

type User {
  id: ID!
  email: String!
  name: String!
}

type Token {
  """JWT access token"""
  accessToken: String!

  """JWT refresh token"""
  refreshToken: String!
}

type Auth {
  """JWT access token"""
  accessToken: String!

  """JWT refresh token"""
  refreshToken: String!
  user: User!
}

type Query {
  user(where: UserWhereUniqueInput!): User!
  me: User!
  users(where: UserWhereInput, orderBy: [UserOrderByInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): [User!]!
}

input UserWhereUniqueInput {
  id: Int
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IntFilter
  email: StringFilter
  name: StringFilter
  pwd: StringFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: SortOrder
  email: SortOrder
  name: SortOrder
  pwd: SortOrder
}

enum SortOrder {
  asc
  desc
}

enum UserScalarFieldEnum {
  id
  email
  name
  pwd
}

type Mutation {
  signup(user: UserCreateInput!): Auth!
  login(data: UserLoginInput!): Auth!
  refreshToken(token: String!): Token!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User!
}

input UserCreateInput {
  email: String!
  name: String!
  pwd: String!
}

input UserLoginInput {
  email: String!
  password: String!
}

input UserUpdateInput {
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  pwd: StringFieldUpdateOperationsInput
}

input StringFieldUpdateOperationsInput {
  set: String
}
